// Code generated by MockGen. DO NOT EDIT.
// Source: team-project/database (interfaces: PlaneRepository)

// Package database is a generated GoMock package.
package database

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
	data "team-project/services/data"
)

// MockPlaneRepository is a mock of PlaneRepository interface
type MockPlaneRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlaneRepositoryMockRecorder
}

// MockPlaneRepositoryMockRecorder is the mock recorder for MockPlaneRepository
type MockPlaneRepositoryMockRecorder struct {
	mock *MockPlaneRepository
}

// NewMockPlaneRepository creates a new mock instance
func NewMockPlaneRepository(ctrl *gomock.Controller) *MockPlaneRepository {
	mock := &MockPlaneRepository{ctrl: ctrl}
	mock.recorder = &MockPlaneRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlaneRepository) EXPECT() *MockPlaneRepositoryMockRecorder {
	return m.recorder
}

// AddPlane mocks base method
func (m *MockPlaneRepository) AddPlane(arg0 data.Plane) (data.Plane, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlane", arg0)
	ret0, _ := ret[0].(data.Plane)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlane indicates an expected call of AddPlane
func (mr *MockPlaneRepositoryMockRecorder) AddPlane(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlane", reflect.TypeOf((*MockPlaneRepository)(nil).AddPlane), arg0)
}

// DeletePlane mocks base method
func (m *MockPlaneRepository) DeletePlane(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlane", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlane indicates an expected call of DeletePlane
func (mr *MockPlaneRepositoryMockRecorder) DeletePlane(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlane", reflect.TypeOf((*MockPlaneRepository)(nil).DeletePlane), arg0)
}

// GetPlane mocks base method
func (m *MockPlaneRepository) GetPlane(arg0 uuid.UUID) (data.Plane, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlane", arg0)
	ret0, _ := ret[0].(data.Plane)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlane indicates an expected call of GetPlane
func (mr *MockPlaneRepositoryMockRecorder) GetPlane(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlane", reflect.TypeOf((*MockPlaneRepository)(nil).GetPlane), arg0)
}

// GetPlanes mocks base method
func (m *MockPlaneRepository) GetPlanes() ([]data.Plane, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanes")
	ret0, _ := ret[0].([]data.Plane)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlanes indicates an expected call of GetPlanes
func (mr *MockPlaneRepositoryMockRecorder) GetPlanes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanes", reflect.TypeOf((*MockPlaneRepository)(nil).GetPlanes))
}

// UpdatePlane mocks base method
func (m *MockPlaneRepository) UpdatePlane(arg0 data.Plane, arg1 uuid.UUID) (data.Plane, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlane", arg0, arg1)
	ret0, _ := ret[0].(data.Plane)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlane indicates an expected call of UpdatePlane
func (mr *MockPlaneRepositoryMockRecorder) UpdatePlane(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlane", reflect.TypeOf((*MockPlaneRepository)(nil).UpdatePlane), arg0, arg1)
}
